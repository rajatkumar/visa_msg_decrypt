
VisaPayloadDecrypt = require '../src/index'

chai = require 'chai'
chai.should()
expect = chai.expect

secret = "5OEz37YWRTwYQJ8}3G#NQVpC5ct2BD5iztS1rxn2";
invalidSecret = "iaminvalid";
encKey = "ck/TCCMSU6/lZPck0mXbpXmdaY/cNqaXz+xqx92Debr+5ALG5ZKVndl4He4JOjfNELE0yBBvEF+gD1FpTDRXdl6j/BkmcNqRsPiU59p7+9ccLlNfdsuf6rhaeuERnSns";
encPaymentData = "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";

describe 'VisaPayloadDecrypt ', ->
  Decrypt = null
  it 'should decrypt successfully', ->
    Decrypt = new VisaPayloadDecrypt secret, true
    decryptedJson = Decrypt.decrypt encKey, encPaymentData
    #console.log decryptedJson
    decryptedJson.userData.userEmail.should.equal('rajat.kumar@payrange.com')
    expect(decryptedJson.paymentInstrument).to.exist
    expect(decryptedJson.paymentInstrument.paymentType).to.exist
  it 'should throw exception for bad secret', ->
    Decrypt = new VisaPayloadDecrypt invalidSecret, false
    (-> Decrypt.decrypt encKey, encPaymentData).should.throw 'Invalid payload or key. HMAC verification failed.'